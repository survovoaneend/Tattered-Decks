[manifest]
version = "1.0.0"
dump_lua = true
priority = 10

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)
            G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))'''
position = 'at'
match_indent = true
payload = '''
if not G.GAME.selected_back.effect.config.ttr_red or (G.GAME.round_resets.ante)%G.GAME.win_ante == 0 and G.GAME.round_resets.ante >= 2 then
    G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)
    G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))
end'''

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)
            G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))'''
position = 'at'
match_indent = true
payload = '''
if not G.GAME.selected_back.effect.config.ttr_red or (G.GAME.round_resets.ante)%G.GAME.win_ante == 0 and G.GAME.round_resets.ante >= 2 then
    G.GAME.current_round.discards_left = math.max(0, G.GAME.round_resets.discards + G.GAME.round_bonus.discards)
    G.GAME.current_round.hands_left = (math.max(1, G.GAME.round_resets.hands + G.GAME.round_bonus.next_hands))
end'''

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''if G.GAME.current_round.discards_left <= 0 or #G.hand.highlighted <= 0 then '''
position = 'at'
match_indent = true
payload = '''if G.GAME.current_round.discards_left < G.GAME.discards_per_discard or #G.hand.highlighted <= 0 then '''

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''won = false,'''
position = 'after'
match_indent = true
payload = '''
discards_per_discard = 1,
hands_per_hand = 1,
eor_boss_discards_perm = 0,
eor_boss_discards_temp = 0,
eor_boss_hands_perm = 0,
eor_boss_hands_temp = 0,
eor_normal_discards_temp = 0,
eor_normal_discards_perm = 0,
eor_normal_hands_temp = 0,
eor_normal_hands_perm = 0,
'''

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''ease_discard(-1)'''
position = 'at'
match_indent = true
payload = '''ease_discard(-G.GAME.discards_per_discard)'''

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''ease_hands_played(-1)'''
position = 'at'
match_indent = true
payload = '''ease_hands_played(-G.GAME.hands_per_hand)'''

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''if self.name == 'The Water' and not reset then 
        self.discards_sub = G.GAME.current_round.discards_left
        ease_discard(-self.discards_sub)
    end'''
position = 'at'
match_indent = true
payload = ''' if self.name == 'The Water' and not reset then 
        if not G.GAME.selected_back.effect.config.ttr_red then
            self.discards_sub = G.GAME.current_round.discards_left
            ease_discard(-self.discards_sub)
        else
            G.GAME.discards_per_discard = 5
        end
end'''

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''if self.name == 'The Needle' and not reset then 
        self.hands_sub = G.GAME.round_resets.hands - 1
        ease_hands_played(-self.hands_sub)
    end'''
position = 'at'
match_indent = true
payload = ''' if self.name == 'The Needle' and not reset then 
    if not G.GAME.selected_back.effect.config.ttr_red then
        self.hands_sub = G.GAME.round_resets.hands - 1
        ease_hands_played(-self.hands_sub)
    else
        if G.GAME.current_round.hands_played > 0 then
            G.GAME.hands_per_hand = 3
        end
    end
end'''

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
table.insert(left_text, {n=G.UIT.T, config={text = config.disp or config.dollars, scale = 0.8*scale, colour = G.C.BLUE, shadow = true, juice = true}})
table.insert(left_text, {n=G.UIT.O, config={object = DynaText({string = {" "..localize{type = 'variable', key = 'remaining_hand_money', vars = {G.GAME.modifiers.money_per_hand or 1}}}, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}})
'''
position = 'at'
match_indent = true
payload = '''
if G.GAME.selected_back.effect.config.ttr_red then
    table.insert(left_text, {n=G.UIT.T, config={text = math.floor(config.disp/6) or math.floor(config.dollars/6), scale = 0.8*scale, colour = G.C.BLUE, shadow = true, juice = true}})
    table.insert(left_text, {n=G.UIT.O, config={object = DynaText({string =" Remaining Hands ($1 per 6)", colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}})
else
    table.insert(left_text, {n=G.UIT.T, config={text = config.disp or config.dollars, scale = 0.8*scale, colour = G.C.BLUE, shadow = true, juice = true}})
    table.insert(left_text, {n=G.UIT.O, config={object = DynaText({string = {" "..localize{type = 'variable', key = 'remaining_hand_money', vars = {G.GAME.modifiers.money_per_hand or 1}}}, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}})
end
'''
#part of yellow as well
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
{n=G.UIT.T, config={text = localize('$')..format_ui_value(config.dollars), scale = 1.2*scale, colour = G.C.WHITE, shadow = true, juice = true}}
'''
position = 'at'
match_indent = true
payload = '''
{n=G.UIT.T, config={text = localize('$')..format_ui_value(math.floor(config.dollars)), scale = 1.2*scale, colour = G.C.WHITE, shadow = true, juice = true}}
'''

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
G.GAME.current_round.dollars = config.dollars
'''
position = 'at'
match_indent = true
payload = '''
G.GAME.current_round.dollars = math.floor(config.dollars)
'''
